# Unit testing using Vader: https://github.com/junegunn/vader.vim to run just open this file in Vim and ":Vader"
#
# Creates a new note and uses simplenote.py to verify a note of that key has been created
Given:
  A test note

Execute (Create a new note):
  let g:SimplenoteUsername = "simplenote-test@lordofhosts.de"
  let g:SimplenotePassword = "foobar"
  :Simplenote -n

Execute python:
  from simplenote import Simplenote
  import vim
  sn = Simplenote("simplenote-test@lordofhosts.de", "foobar")
  snkey = vim.current.buffer.name.split("/")[-1]
  note = sn.get_note(snkey)
  vim.current.buffer.append(note[0]["content"])

Expect:
  A test note
  A test note
# Using simplenote.py to verify note creation and append to buffer, hence why expect two lines the same


# Updates a note
Given:
  A second test note

Execute (Update a note):
  :Simplenote -n
  call setline(1, "An updated note")
  :Simplenote -u

Execute python:
  snkey = vim.current.buffer.name.split("/")[-1]
  note_original = sn.get_note(snkey,1)
  vim.current.buffer.append(note_original[0]["content"])
  note_updated = sn.get_note(snkey)
  vim.current.buffer.append(note_updated[0]["content"])

Expect:
  A second test note
  A second test note
  An updated note


# Trashes a note
Given:
  A third test note

Execute:
  :Simplenote -n

Execute python:
  snkey = vim.current.buffer.name.split("/")[-1]

Execute (Trash a note):
  :Simplenote -d

Execute python:
  note = sn.get_note(snkey)
  vim.current.buffer.append(str(note[0]["deleted"]))

Expect:
  A third test note
  1


# Deletes a note
Given:
  A fourth test note

Execute:
  :Simplenote -n

Execute python:
  snkey = vim.current.buffer.name.split("/")[-1]

Execute (Delete a note):
  :Simplenote -D

Execute python:
  note = sn.get_note(snkey)
  vim.current.buffer.append(str(note[0].code))

Expect:
  A fourth test note
  404


# Open a note by key
Given:
  A fifth test note

Execute:
  :Simplenote -n
  let s:snkey = expand('%:t')

Given:
  A sixth test note

Execute (Open a note by key):
  :Simplenote -n
  execute "Simplenote -o " . s:snkey

Expect:
  A fifth test note


# Tag a note
Given:
  A seventh test note

Do (Tag a new note):
  :Simplenote -n\<CR>
  :Simplenote -t\<CR>tag\<CR>

Execute python:
  snkey = vim.current.buffer.name.split("/")[-1]
  note = sn.get_note(snkey)
  vim.current.buffer.append(str(note[0]["tags"][0]))

Expect:
  A seventh test note
  tag


# Get a list of notes
Execute (Get a list of notes):
  :Simplenote -l
  "Below is required as Simplenote list sets buffer to unmodifiable so need to set it to modifiable... 
  :set modifiable
  AssertEqual 5, line('$')
  "and clear it
  :1,$d


# Cleanup Remote
Execute python (Cleanup remote):
  res, status = sn.get_note_list()
  while (len(res) > 0) and (status == 0):
    [sn.delete_note(n["key"]) for n in res]
    res, status = sn.get_note_list()


# Cleanup locally
Execute (Cleanup locally):
  "Remove unneeded buffers
  let tablist = []
  for i in range(tabpagenr('$'))
    call extend(tablist, tabpagebuflist(i + 1))
  endfor
  let nWipeouts = 0
  for i in range(1, bufnr('$'))
    if bufexists(i) && (match(bufname(i), "simplenote.vader") == -1) && (match(bufname(i), "Quickfix List") == -1) && (match(bufname(i), "Vader") == -1)
      silent exec 'bwipeout!' i
    endif
  endfor
